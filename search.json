[{"path":"https://Yangzhen1999.github.io/semboottools/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://Yangzhen1999.github.io/semboottools/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://Yangzhen1999.github.io/semboottools/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://Yangzhen1999.github.io/semboottools/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://Yangzhen1999.github.io/semboottools/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://Yangzhen1999.github.io/semboottools/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://Yangzhen1999.github.io/semboottools/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://Yangzhen1999.github.io/semboottools/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://Yangzhen1999.github.io/semboottools/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://Yangzhen1999.github.io/semboottools/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://Yangzhen1999.github.io/semboottools/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://Yangzhen1999.github.io/semboottools/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://Yangzhen1999.github.io/semboottools/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://Yangzhen1999.github.io/semboottools/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://Yangzhen1999.github.io/semboottools/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://Yangzhen1999.github.io/semboottools/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://Yangzhen1999.github.io/semboottools/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://Yangzhen1999.github.io/semboottools/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://Yangzhen1999.github.io/semboottools/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://Yangzhen1999.github.io/semboottools/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://Yangzhen1999.github.io/semboottools/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://Yangzhen1999.github.io/semboottools/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Wendie Yang. Author, maintainer. Shu Fai Cheung. Author.","code":""},{"path":"https://Yangzhen1999.github.io/semboottools/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Yang W, Cheung S (2025). semboottools: Bootstrapping Helpers Structural Equation Modelling. R package version 0.0.0.9011.","code":"@Manual{,   title = {semboottools: Bootstrapping Helpers For Structural Equation Modelling},   author = {Wendie Yang and Shu Fai Cheung},   year = {2025},   note = {R package version 0.0.0.9011}, }"},{"path":"https://Yangzhen1999.github.io/semboottools/index.html","id":"semboottools-bootstrapping-helpers-for-structural-equation-modelling","dir":"","previous_headings":"","what":"Bootstrapping Helpers For Structural Equation Modelling","title":"Bootstrapping Helpers For Structural Equation Modelling","text":"collection helper functions forming bootstrapping confidence intervals examining bootstrap estimates structural equation modelling. information package, please visit GitHub page: https://Yangzhen1999.github.io/semboottools/","code":""},{"path":"https://Yangzhen1999.github.io/semboottools/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Bootstrapping Helpers For Structural Equation Modelling","text":"Stable release versions package can downloaded : https://github.com/Yangzhen1999/semboottools/releases latest developmental version package can installed remotes::install_github:","code":"remotes::install_github(\"Yangzhen1999/semboottools\")"},{"path":"https://Yangzhen1999.github.io/semboottools/index.html","id":"issues","dir":"","previous_headings":"","what":"Issues","title":"Bootstrapping Helpers For Structural Equation Modelling","text":"suggestions found bugs, please feel feel open GitHub issue. Thanks.","code":""},{"path":"https://Yangzhen1999.github.io/semboottools/reference/hist_qq_boot.html","id":null,"dir":"Reference","previous_headings":"","what":"Diagnostic Plots of Bootstrap Estimates in 'lavaan' — hist_qq_boot","title":"Diagnostic Plots of Bootstrap Estimates in 'lavaan' — hist_qq_boot","text":"Plots examining distribution bootstrap estimates model fitted lavaan.","code":""},{"path":"https://Yangzhen1999.github.io/semboottools/reference/hist_qq_boot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Diagnostic Plots of Bootstrap Estimates in 'lavaan' — hist_qq_boot","text":"","code":"hist_qq_boot(   object,   param,   standardized = NULL,   nclass = NULL,   hist_color = \"lightgrey\",   hist_linewidth = 1,   density_line_type = \"solid\",   density_line_color = \"blue\",   density_line_linewidth = 2,   est_line_type = \"dotted\",   est_line_color = \"red\",   est_line_linewidth = 2,   qq_dot_size = 2,   qq_dot_color = \"black\",   qq_dot_pch = 16,   qq_line_linewidth = 2,   qq_line_color = \"black\",   qq_line_linetype = \"solid\" )  scatter_boot(   object,   params,   standardized = NULL,   main = \"Bootstrap Estimates\",   ... )"},{"path":"https://Yangzhen1999.github.io/semboottools/reference/hist_qq_boot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diagnostic Plots of Bootstrap Estimates in 'lavaan' — hist_qq_boot","text":"object Either lavaan-class object bootstrap estimates stored, output standardizedSolution_boot(). standardized solution user-defined parameters, object `lavaan-class“ object, estimates need stored store_boot(). param String. name parameter plotted, name appeared call coef(). standardized Logical. Whether estimates standardized solution plotted. Default NULL. object lavaan object, required parameter users need explicitly set TRUE FALSE. object output standardizedSolution_boot(), argument ignored ( forced TRUE internally). nclass number breaks. argument passed hist(). Default NULL. hist_color String. color bars histogram. passed hist() argument col. Default \"lightgrey\". hist_linewidth width borders bars histogram. Default 1. density_line_type String. type line density curve histogram. passed lines() argument lty. Default \"solid\". density_line_color String. color density curve histogram. passed lines() argument col. Default \"blue\". density_line_linewidth width density curve histogram. passed lines() argument lwd. Default 2. est_line_type String. type vertical line histogram showing point estimate parameter. passed abline() argument lty. Default \"dotted\", est_line_color String. color vertical line showing point estimate histogram. passed abline() argument col. Default \"red\". est_line_linewidth width vertical line showing point estimate histogram. passed hist() argument lwd.  Default 2. qq_dot_size size points normal QQ-plot. passed qqnorm() argument cex. Default 2. qq_dot_color String. color points normal QQ-plot. passed qqnorm() argument col. Default \"black\". qq_dot_pch Numeric. shape points normal QQ-plot. passed qqnorm() argument pch. Default 16. qq_line_linewidth width diagonal line drawn normal QQ-plot. passed qqline() argument lwd. Default 2. qq_line_color String. color diagonal line drawn normal QQ-plot. passed qqline() argument col. Default \"black\". qq_line_linetype type diagonal line drawn normal QQ-plot. Default \"solid\". params vector names parameters plotted, names appeared call coef(). function scatter_boot() requires two parameters selected argument. main title scatterplot matrix. Default \"Bootstrap Estimates\". ... Arguments passed psych::pairs.panels(). Please refer help page psych::pairs.panels() arguments customize plot.","code":""},{"path":"https://Yangzhen1999.github.io/semboottools/reference/hist_qq_boot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Diagnostic Plots of Bootstrap Estimates in 'lavaan' — hist_qq_boot","text":"Return original lavaan::lavaan object invisibly. Called side-effect (plotting graphs).","code":""},{"path":"https://Yangzhen1999.github.io/semboottools/reference/hist_qq_boot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Diagnostic Plots of Bootstrap Estimates in 'lavaan' — hist_qq_boot","text":"Rousselet, Pernet, Wilcox (2021) argued using bootstrapping, necessary examine distribution bootstrap estimates. can done boot::boot() used plot method output. easily done model fitted lavaan::lavaan(), lavaan::sem() lavaan::cfa(). function hist_qq_boot() used plotting distribution bootstrap estimates model fitted lavaan format similar output boot::boot(), histogram left normal QQ-plot right. free parameters model (unstandardized), can called directly output lavaan retrieves stored estimates. estimates user-defined parameters, call store_boot() first compute store bootstrap estimates first. estimates standardized solution, free user-defined parameters, call store_boot() first compute store bootstrap estimates standardized solution. can also plot bootstrap estimates output standardizedSolution_boot() parameterEstimates_boot(). function scatter_boot() used generate scatterplot matrix bootstrap estimates two parameters. function psych::pairs.panels() package psych used. Like hist_qq_boot(), can also used output standardizedSolution_boot() parameterEstimates_boot().","code":""},{"path":"https://Yangzhen1999.github.io/semboottools/reference/hist_qq_boot.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Diagnostic Plots of Bootstrap Estimates in 'lavaan' — hist_qq_boot","text":"Rousselet, G. ., Pernet, C. R., & Wilcox, R. R. (2021). percentile bootstrap: primer step--step instructions R. Advances Methods Practices Psychological Science, 4(1), 1–10. doi:10.1177/2515245920911881","code":""},{"path":[]},{"path":"https://Yangzhen1999.github.io/semboottools/reference/hist_qq_boot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Diagnostic Plots of Bootstrap Estimates in 'lavaan' — hist_qq_boot","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://Yangzhen1999.github.io/semboottools/reference/hist_qq_boot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Diagnostic Plots of Bootstrap Estimates in 'lavaan' — hist_qq_boot","text":"","code":"library(lavaan) #> This is lavaan 0.6-19 #> lavaan is FREE software! Please report any bugs.  set.seed(5478374) n <- 50 x <- runif(n) - .5 m <- .40 * x + rnorm(n, 0, sqrt(1 - .40)) y <- .30 * m + rnorm(n, 0, sqrt(1 - .30)) dat <- data.frame(x = x, y = y, m = m)  mod <- \" m ~ a * x y ~ b * m + x ab := a * b \" fit <- sem(mod,            data = dat,            se = \"bootstrap\",            bootstrap = 50,            iseed = 985714)  # Can plot bootstrap estimates for # free parameters directly # Note that 'standardized' must be always be set to # either TRUE or FALSE. No default value. hist_qq_boot(fit, \"a\", standardized = FALSE)   # For estimates of user-defined parameters, # call store_boot() first. fit <- store_boot(fit) hist_qq_boot(fit, \"ab\", standardized = FALSE)   # For estimates in standardized solution, # call store_boot() first. fit <- store_boot(fit) hist_qq_boot(fit, \"a\", standardized = TRUE)  hist_qq_boot(fit, \"ab\", standardized = TRUE)   # It can also plot the estimates stored # in the output of standardizedSolution_boot(). std_boot <- standardizedSolution_boot(fit) #> Warning: The number of bootstrap samples (50) is less than 'boot_pvalue_min_size' (1000). Bootstrap p-values are not computed. hist_qq_boot(std_boot, \"ab\")  hist_qq_boot(fit, \"ab\", standardized = TRUE)     # Scatterplot matrix of bootstrap estimates for # two or more free parameters scatter_boot(fit, c(\"a\", \"b\", \"ab\"), standardized = FALSE)   # Can include user-defined parameters in # scatterplot matrix, if their bootstrap # estimates have been stored scatter_boot(fit, c(\"ab\", \"a\", \"b\"), standardized = FALSE)   # scatter_boot also supports the # standardized solution scatter_boot(fit, c(\"a\", \"b\", \"ab\"), standardized = TRUE)"},{"path":"https://Yangzhen1999.github.io/semboottools/reference/parameterEstimates_boot.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrap CIs for Parameter Estimates — parameterEstimates_boot","title":"Bootstrap CIs for Parameter Estimates — parameterEstimates_boot","text":"Functions forming bootstrap confidence intervals parameter estimates.","code":""},{"path":"https://Yangzhen1999.github.io/semboottools/reference/parameterEstimates_boot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrap CIs for Parameter Estimates — parameterEstimates_boot","text":"","code":"parameterEstimates_boot(   object,   level = 0.95,   boot_org_ratio = FALSE,   boot_ci_type = c(\"perc\", \"bc\", \"bca.simple\"),   save_boot_est = TRUE,   boot_pvalue = TRUE,   boot_pvalue_min_size = 1000,   standardized = FALSE,   ... )"},{"path":"https://Yangzhen1999.github.io/semboottools/reference/parameterEstimates_boot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrap CIs for Parameter Estimates — parameterEstimates_boot","text":"object 'lavaan'-class object, fitted 'se = \"boot\"'. level level confidence confidence intervals. Default .95. boot_org_ratio ratio () distance bootstrap confidence limit point estimate (b) distance original confidence limit object point estimate. Default FALSE. boot_ci_type type bootstrapping confidence intervals. Support percentile confidence intervals (\"perc\", default) bias-corrected confidence intervals (\"bc\" \"bca.simple\"). save_boot_est Whether bootstrap estimates parameter estimates saved. saved, bootstrap estimates free parameters stored attribute boot_est_ustd, bootstrap estimates user-defined parameters, , stored attribute boot_def. Default TRUE. boot_pvalue Whether asymmetric bootstrap p-values computed. Default TRUE. boot_pvalue_min_size Integer. asymmetric bootstrap p-values computed number valid bootstrap estimates least value. Otherwise, NA returned. number valid bootstrap samples less value, boot_pvalue set FALSE. standardized type standardized estimates. argument lavaan::parameterEstimates(), support values supported lavaan::parameterEstimates(). recommended use standardizedSolution_boot() lavaan::standardizedSolution() function report point estimates standardized solution, without standard errors confidence intervals. ... arguments passed lavaan::parameterEstimates().","code":""},{"path":"https://Yangzhen1999.github.io/semboottools/reference/parameterEstimates_boot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrap CIs for Parameter Estimates — parameterEstimates_boot","text":"output lavaan::parameterEstimates(), bootstrap confidence intervals appended right, class set sbt_ustd_boot. print method (print.sbt_ustd_boot()) can used print parameter estimates format similar printout summary() lavaan::lavaan object.","code":""},{"path":"https://Yangzhen1999.github.io/semboottools/reference/parameterEstimates_boot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bootstrap CIs for Parameter Estimates — parameterEstimates_boot","text":"parameterEstimates_boot() receives lavaan::lavaan object form bootstrap confidence intervals parameter estimates. function store_boot() called first compute store bootstrap estimates. function retrieve .","code":""},{"path":"https://Yangzhen1999.github.io/semboottools/reference/parameterEstimates_boot.html","id":"bootstrap-confidence-intervals","dir":"Reference","previous_headings":"","what":"Bootstrap Confidence Intervals","title":"Bootstrap CIs for Parameter Estimates — parameterEstimates_boot","text":"supports percentile bias-corrected bootstrap confidence intervals.","code":""},{"path":"https://Yangzhen1999.github.io/semboottools/reference/parameterEstimates_boot.html","id":"bootstrap-standard-errors","dir":"Reference","previous_headings":"","what":"Bootstrap Standard Errors","title":"Bootstrap CIs for Parameter Estimates — parameterEstimates_boot","text":"standard errors standard deviation bootstrap estimates.","code":""},{"path":"https://Yangzhen1999.github.io/semboottools/reference/parameterEstimates_boot.html","id":"bootstrap-asymmetric-p-values","dir":"Reference","previous_headings":"","what":"Bootstrap Asymmetric p-Values","title":"Bootstrap CIs for Parameter Estimates — parameterEstimates_boot","text":"percentile bootstrap confidence interval requested, asymmetric bootstrap p-values also computed, using method presented Asparouhov Muthén (2021).","code":""},{"path":"https://Yangzhen1999.github.io/semboottools/reference/parameterEstimates_boot.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Bootstrap CIs for Parameter Estimates — parameterEstimates_boot","text":"Asparouhov, ., & Muthén, B. (2021). Bootstrap p-value computation. Retrieved https://www.statmodel.com/download/FAQ-Bootstrap%20-%20Pvalue.pdf","code":""},{"path":[]},{"path":"https://Yangzhen1999.github.io/semboottools/reference/parameterEstimates_boot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bootstrap CIs for Parameter Estimates — parameterEstimates_boot","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448.","code":""},{"path":"https://Yangzhen1999.github.io/semboottools/reference/parameterEstimates_boot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootstrap CIs for Parameter Estimates — parameterEstimates_boot","text":"","code":"library(lavaan) set.seed(5478374) n <- 50 x <- runif(n) - .5 m <- .40 * x + rnorm(n, 0, sqrt(1 - .40)) y <- .30 * m + rnorm(n, 0, sqrt(1 - .30)) dat <- data.frame(x = x, y = y, m = m) model <- ' m ~ a*x y ~ b*m ab := a*b '  # Should set bootstrap to at least 2000 in real studies fit <- sem(model, data = dat, fixed.x = FALSE) summary(fit) #> lavaan 0.6-19 ended normally after 1 iteration #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                         5 #>  #>   Number of observations                            50 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 0.020 #>   Degrees of freedom                                 1 #>   P-value (Chi-square)                           0.887 #>  #> Parameter Estimates: #>  #>   Standard errors                             Standard #>   Information                                 Expected #>   Information saturated (h1) model          Structured #>  #> Regressions: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   m ~                                                  #>     x          (a)    0.569    0.343    1.660    0.097 #>   y ~                                                  #>     m          (b)    0.219    0.153    1.430    0.153 #>  #> Variances: #>                    Estimate  Std.Err  z-value  P(>|z|) #>    .m                 0.460    0.092    5.000    0.000 #>    .y                 0.570    0.114    5.000    0.000 #>     x                 0.078    0.016    5.000    0.000 #>  #> Defined Parameters: #>                    Estimate  Std.Err  z-value  P(>|z|) #>     ab                0.125    0.115    1.083    0.279 #>  fit <- store_boot(fit,                   do_bootstrapping = TRUE,                   R = 100,                   iseed = 1234) est <- parameterEstimates_boot(fit) #> Warning: The number of bootstrap samples (100) is less than 'boot_pvalue_min_size' (1000). Bootstrap p-values are not computed. est #>  #> Bootstrapping: #>                                      #>  Valid Bootstrap Samples: 100        #>  Level of Confidence:     95.0%      #>  CI Type:                 Percentile #>  #> Parameter Estimates Settings: #>                                               #>  Standard errors:                  Standard   #>  Information:                      Expected   #>  Information saturated (h1) model: Structured #>  #> Regressions: #>          Estimate    SE     p  CI.Lo CI.Up   bSE bCI.Lo bCI.Up #>  m ~                                                           #>   x (a)     0.569 0.343 0.097 -0.103 1.240 0.326 -0.054  1.276 #>  y ~                                                           #>   m (b)     0.219 0.153 0.153 -0.081 0.519 0.151 -0.060  0.572 #>  #> Variances: #>          Estimate    SE     p  CI.Lo CI.Up   bSE bCI.Lo bCI.Up #>   .m        0.460 0.092 0.000  0.280 0.641 0.093  0.248  0.673 #>   .y        0.570 0.114 0.000  0.347 0.794 0.104  0.386  0.806 #>    x        0.078 0.016 0.000  0.048 0.109 0.012  0.052  0.106 #>  #> Defined Parameters: #>          Estimate    SE     p  CI.Lo CI.Up   bSE bCI.Lo bCI.Up #>  ab (ab)    0.125 0.115 0.279 -0.101 0.350 0.135 -0.027  0.446 #>  #> Footnote: #> - SE: Original standard errors. #> - p: Original p-values. #> - CI.Lo, CI.Up: Original confidence intervals. #> - bSE: Bootstrap standard errors. #> - bCI.Lo, bCI.Up: Bootstrap confidence intervals."},{"path":"https://Yangzhen1999.github.io/semboottools/reference/print.sbt_std_boot.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a 'sbt_std_boot' Object — print.sbt_std_boot","title":"Print a 'sbt_std_boot' Object — print.sbt_std_boot","text":"Print method 'sbt_std_boot' object, output standardizedSolution_boot().","code":""},{"path":"https://Yangzhen1999.github.io/semboottools/reference/print.sbt_std_boot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a 'sbt_std_boot' Object — print.sbt_std_boot","text":"","code":"# S3 method for class 'sbt_std_boot' print(   x,   ...,   nd = 3,   output = c(\"lavaan.printer\", \"text\", \"table\"),   standardized_only = TRUE,   boot_ci_only = FALSE,   drop_cols = \"Z\" )"},{"path":"https://Yangzhen1999.github.io/semboottools/reference/print.sbt_std_boot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a 'sbt_std_boot' Object — print.sbt_std_boot","text":"x Object class sbt_std_boot, output standardizedSolution_boot(). ... Optional arguments passed print() methods. nd number digits decimal place. Default 3. output String. results printed. set \"table\", results printed table format similar lavaan::standardizedSolution(). set \"text\", results printed text format similar printout output summary() 'lavaan'-class object. set \"lavaan.printer\", default, lavaan.printer used print compact version \"text\" output. standardized_only Logical. TRUE, default, results standardized solution printed. FALSE, standardized solution printed alongside unstandardized solution, printout output summary() 'lavaan'-class object. boot_ci_only Logical. Whether bootstrap confidence intervals printed. FALSE, default, delta method confidence intervals lavaan::standardizedSolution() also printed. drop_cols name(s) column(s) drop output format \"lavaan.printer\". Default \"Z\", fit print usual screen width 80.","code":""},{"path":"https://Yangzhen1999.github.io/semboottools/reference/print.sbt_std_boot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a 'sbt_std_boot' Object — print.sbt_std_boot","text":"x returned invisibly. Called side effect.","code":""},{"path":"https://Yangzhen1999.github.io/semboottools/reference/print.sbt_std_boot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print a 'sbt_std_boot' Object — print.sbt_std_boot","text":"default format printout, \"lavaan.printer\", compact version lavaan-style printout, generated lavaan.printer. Alternatively, users can request format similar printout summary lavaan output setting output \"text\". format can used \"lavaan.printer\" failed. Users can also print content just data frame setting output \"table\". easy read much compact. \"text\" \"lavaan.printer\" format, users can also select whether standardized solution printed (default) whether standardized solution appended right printout.","code":""},{"path":[]},{"path":"https://Yangzhen1999.github.io/semboottools/reference/print.sbt_std_boot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print a 'sbt_std_boot' Object — print.sbt_std_boot","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://Yangzhen1999.github.io/semboottools/reference/print.sbt_std_boot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a 'sbt_std_boot' Object — print.sbt_std_boot","text":"","code":"library(lavaan) set.seed(5478374) n <- 50 x <- runif(n) - .5 m <- .40 * x + rnorm(n, 0, sqrt(1 - .40)) y <- .30 * m + rnorm(n, 0, sqrt(1 - .30)) dat <- data.frame(x = x, y = y, m = m) model <- ' m ~ a*x y ~ b*m ab := a*b '  # Should set bootstrap to at least 2000 in real studies fit <- sem(model, data = dat, fixed.x = FALSE,            se = \"boot\",            bootstrap = 50) std_out <- standardizedSolution_boot(fit) #> Warning: The number of bootstrap samples (50) is less than 'boot_pvalue_min_size' (1000). Bootstrap p-values are not computed. std_out #>  #> Bootstrapping: #>                                      #>  Valid Bootstrap Samples: 50         #>  Level of Confidence:     95.0%      #>  CI Type:                 Percentile #>  Standardization Type:    std.all    #>  #> Parameter Estimates Settings: #>                                                  #>  Standard errors:                      Bootstrap #>  Number of requested bootstrap draws:  50        #>  Number of successful bootstrap draws: 50        #>  #> Regressions: #>            Std    SE     p  CI.Lo CI.Up   bSE bCI.Lo bCI.Up #>  m ~                                                        #>   x (a)  0.229 0.117 0.051 -0.001 0.458 0.121 -0.025  0.462 #>  y ~                                                        #>   m (b)  0.198 0.121 0.100 -0.038 0.434 0.112 -0.005  0.492 #>  #> Variances: #>            Std    SE     p  CI.Lo CI.Up   bSE bCI.Lo bCI.Up #>   .m     0.948 0.053 0.000  0.843 1.053 0.055  0.786  1.000 #>   .y     0.961 0.048 0.000  0.867 1.054 0.056  0.758  0.999 #>    x     1.000                                              #>  #> Defined Parameters: #>            Std    SE     p  CI.Lo CI.Up   bSE bCI.Lo bCI.Up #>  ab (ab) 0.045 0.037 0.215 -0.026 0.117 0.038 -0.006  0.151 #>  #> Footnote: #> - Std: Standardized estimates. #> - SE: Delta method standard errors. #> - p: Delta method p-values. #> - CI.Lo, CI.Up: Delta method confidence intervals. #> - bSE: Bootstrap standard errors. #> - bCI.Lo, bCI.Up: Bootstrap confidence intervals. print(std_out, standardized_only = FALSE) #>  #> Bootstrapping: #>                                      #>  Valid Bootstrap Samples: 50         #>  Level of Confidence:     95.0%      #>  CI Type:                 Percentile #>  Standardization Type:    std.all    #>  #> Parameter Estimates Settings: #>                                                  #>  Standard errors:                      Bootstrap #>  Number of requested bootstrap draws:  50        #>  Number of successful bootstrap draws: 50        #>  #> Regressions: #>            Est    SE     p  CI.Lo CI.Up   Std   bSE bCI.Lo bCI.Up #>  m ~                                                              #>   x (a)  0.569 0.293 0.052 -0.056 1.165 0.229 0.121 -0.025  0.462 #>  y ~                                                              #>   m (b)  0.219 0.147 0.136 -0.002 0.725 0.198 0.112 -0.005  0.492 #>  #> Variances: #>            Est    SE     p  CI.Lo CI.Up   Std   bSE bCI.Lo bCI.Up #>   .m     0.460 0.083 0.000  0.247 0.593 0.948 0.055  0.786  1.000 #>   .y     0.570 0.109 0.000  0.341 0.792 0.961 0.056  0.758  0.999 #>    x     0.078 0.013 0.000  0.052 0.102 1.000                     #>  #> Defined Parameters: #>            Est    SE     p  CI.Lo CI.Up   Std   bSE bCI.Lo bCI.Up #>  ab (ab) 0.125 0.107 0.246 -0.019 0.440 0.045 0.038 -0.006  0.151 #>  #> Footnote: #> - Estimate: Unstandardized estimates. #> - SE: Standard errors of unstandardized estimates. #> - p: P-values of unstandardized estimates. #> - CI.Lo, CI.Up: Confidence intervals of unstandardized estimates. #> - Std: Standardized estimates. #> - bSE: Bootstrap standard errors of standardized estimates. #> - bCI.Lo, bCI.Up: Bootstrap confidence intervals of standardized #>   estimates."},{"path":"https://Yangzhen1999.github.io/semboottools/reference/print.sbt_ustd_boot.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a 'sbt_ustd_boot' Object — print.sbt_ustd_boot","title":"Print a 'sbt_ustd_boot' Object — print.sbt_ustd_boot","text":"Print method 'sbt_ustd_boot' object, output parameterEstimates_boot().","code":""},{"path":"https://Yangzhen1999.github.io/semboottools/reference/print.sbt_ustd_boot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a 'sbt_ustd_boot' Object — print.sbt_ustd_boot","text":"","code":"# S3 method for class 'sbt_ustd_boot' print(   x,   ...,   nd = 3,   output = c(\"lavaan.printer\", \"text\", \"table\"),   drop_cols = \"Z\" )"},{"path":"https://Yangzhen1999.github.io/semboottools/reference/print.sbt_ustd_boot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a 'sbt_ustd_boot' Object — print.sbt_ustd_boot","text":"x Object class sbt_ustd_boot, output parameterEstimates_boot(). ... Optional arguments passed print() methods. nd number digits decimal place. Default 3. output String. results printed. set \"table\", results printed table format similar lavaan::parameterEstimates(). set \"text\", results printed text format similar printout output summary() 'lavaan'-class object. set \"lavaan.printer\", default, lavaan.printer used print compact version \"text\" output. drop_cols name(s) column(s) drop output format \"lavaan.printer\". Default \"Z\", fit print usual screen width 80.","code":""},{"path":"https://Yangzhen1999.github.io/semboottools/reference/print.sbt_ustd_boot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a 'sbt_ustd_boot' Object — print.sbt_ustd_boot","text":"x returned invisibly. Called side effect.","code":""},{"path":"https://Yangzhen1999.github.io/semboottools/reference/print.sbt_ustd_boot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print a 'sbt_ustd_boot' Object — print.sbt_ustd_boot","text":"default format printout, \"lavaan.printer\", compact version lavaan-style printout, generated lavaan.printer. Alternatively, users can request format similar printout summary lavaan output setting output \"text\". format can used \"lavaan.printer\" failed. Users can also print content just data frame setting output \"table\". easy read much compact.","code":""},{"path":[]},{"path":"https://Yangzhen1999.github.io/semboottools/reference/print.sbt_ustd_boot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print a 'sbt_ustd_boot' Object — print.sbt_ustd_boot","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://Yangzhen1999.github.io/semboottools/reference/print.sbt_ustd_boot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a 'sbt_ustd_boot' Object — print.sbt_ustd_boot","text":"","code":"library(lavaan) set.seed(5478374) n <- 50 x <- runif(n) - .5 m <- .40 * x + rnorm(n, 0, sqrt(1 - .40)) y <- .30 * m + rnorm(n, 0, sqrt(1 - .30)) dat <- data.frame(x = x, y = y, m = m) model <- ' m ~ a*x y ~ b*m ab := a*b '  # Should set bootstrap to at least 2000 in real studies fit <- sem(model, data = dat, fixed.x = FALSE)  fit <- store_boot(fit,                   do_bootstrapping = TRUE,                   R = 100,                   iseed = 1234)  est <- parameterEstimates_boot(fit) #> Warning: The number of bootstrap samples (100) is less than 'boot_pvalue_min_size' (1000). Bootstrap p-values are not computed. est #>  #> Bootstrapping: #>                                      #>  Valid Bootstrap Samples: 100        #>  Level of Confidence:     95.0%      #>  CI Type:                 Percentile #>  #> Parameter Estimates Settings: #>                                               #>  Standard errors:                  Standard   #>  Information:                      Expected   #>  Information saturated (h1) model: Structured #>  #> Regressions: #>          Estimate    SE     p  CI.Lo CI.Up   bSE bCI.Lo bCI.Up #>  m ~                                                           #>   x (a)     0.569 0.343 0.097 -0.103 1.240 0.326 -0.054  1.276 #>  y ~                                                           #>   m (b)     0.219 0.153 0.153 -0.081 0.519 0.151 -0.060  0.572 #>  #> Variances: #>          Estimate    SE     p  CI.Lo CI.Up   bSE bCI.Lo bCI.Up #>   .m        0.460 0.092 0.000  0.280 0.641 0.093  0.248  0.673 #>   .y        0.570 0.114 0.000  0.347 0.794 0.104  0.386  0.806 #>    x        0.078 0.016 0.000  0.048 0.109 0.012  0.052  0.106 #>  #> Defined Parameters: #>          Estimate    SE     p  CI.Lo CI.Up   bSE bCI.Lo bCI.Up #>  ab (ab)    0.125 0.115 0.279 -0.101 0.350 0.135 -0.027  0.446 #>  #> Footnote: #> - SE: Original standard errors. #> - p: Original p-values. #> - CI.Lo, CI.Up: Original confidence intervals. #> - bSE: Bootstrap standard errors. #> - bCI.Lo, bCI.Up: Bootstrap confidence intervals."},{"path":"https://Yangzhen1999.github.io/semboottools/reference/semboottools-package.html","id":null,"dir":"Reference","previous_headings":"","what":"semboottools: Bootstrapping Helpers For Structural Equation Modelling — semboottools-package","title":"semboottools: Bootstrapping Helpers For Structural Equation Modelling — semboottools-package","text":"collection helper functions forming bootstrapping confidence intervals examining bootstrap estimates structural equation modelling. Currently supports models fitted 'lavaan' package Rosseel (2012) doi: 10.18637/jss.v048.i02 .","code":""},{"path":"https://Yangzhen1999.github.io/semboottools/reference/semboottools-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"semboottools: Bootstrapping Helpers For Structural Equation Modelling — semboottools-package","text":"Maintainer: Wendie Yang 1581075494q@gmail.com (ORCID) Authors: Shu Fai Cheung shufai.cheung@gmail.com (ORCID)","code":""},{"path":"https://Yangzhen1999.github.io/semboottools/reference/standardizedSolution_boot.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrap CIs for Standardized Solution — standardizedSolution_boot","title":"Bootstrap CIs for Standardized Solution — standardizedSolution_boot","text":"Functions forming bootstrap confidence intervals standardized solution.","code":""},{"path":"https://Yangzhen1999.github.io/semboottools/reference/standardizedSolution_boot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrap CIs for Standardized Solution — standardizedSolution_boot","text":"","code":"standardizedSolution_boot(   object,   level = 0.95,   type = \"std.all\",   boot_delta_ratio = FALSE,   boot_ci_type = c(\"perc\", \"bc\", \"bca.simple\"),   save_boot_est_std = TRUE,   boot_pvalue = TRUE,   boot_pvalue_min_size = 1000,   ... )"},{"path":"https://Yangzhen1999.github.io/semboottools/reference/standardizedSolution_boot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrap CIs for Standardized Solution — standardizedSolution_boot","text":"object 'lavaan'-class object, fitted 'se = \"boot\"'. level level confidence confidence intervals. Default .95. type type standard estimates. argument lavaan::standardizedSolution(), support values supported lavaan::standardizedSolution(). Default \"std.\". boot_delta_ratio ratio () distance bootstrap confidence limit point estimate (b) distance delta-method limit point estimate. Default FALSE. boot_ci_type type bootstrapping confidence intervals. Support percentile confidence intervals (\"perc\", default) bias-corrected confidence intervals (\"bc\" \"bca.simple\"). save_boot_est_std Whether bootstrap estimates standardized solution saved. saved, stored attribute boot_est_std. Default TRUE. boot_pvalue Whether asymmetric bootstrap p-values computed. Default TRUE. boot_pvalue_min_size Integer. asymmetric bootstrap p-values computed number valid bootstrap estimates least value. Otherwise, NA returned. number valid bootstrap samples less value, boot_pvalue set FALSE. ... arguments passed lavaan::standardizedSolution().","code":""},{"path":"https://Yangzhen1999.github.io/semboottools/reference/standardizedSolution_boot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrap CIs for Standardized Solution — standardizedSolution_boot","text":"output lavaan::standardizedSolution(), bootstrap confidence intervals appended right, class set sbt_std_boot. print method (print.sbt_std_boot()) can used print standardized solution format similar printout summary() lavaan::lavaan object.","code":""},{"path":"https://Yangzhen1999.github.io/semboottools/reference/standardizedSolution_boot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bootstrap CIs for Standardized Solution — standardizedSolution_boot","text":"standardizedSolution_boot() receives lavaan::lavaan object fitted bootstrapping standard errors requested forms confidence intervals standardized solution. works calling lavaan::standardizedSolution() bootstrap estimates free parameters bootstrap sample compute standardized estimates sample. Alternative, call store_boot() computes store bootstrap estimates standardized solution. function retrieve , even se set \"boot\" \"bootstrap\" fitting model.","code":""},{"path":"https://Yangzhen1999.github.io/semboottools/reference/standardizedSolution_boot.html","id":"bootstrap-confidence-intervals","dir":"Reference","previous_headings":"","what":"Bootstrap Confidence Intervals","title":"Bootstrap CIs for Standardized Solution — standardizedSolution_boot","text":"supports percentile bias-corrected bootstrap confidence intervals.","code":""},{"path":"https://Yangzhen1999.github.io/semboottools/reference/standardizedSolution_boot.html","id":"bootstrap-standard-errors","dir":"Reference","previous_headings":"","what":"Bootstrap Standard Errors","title":"Bootstrap CIs for Standardized Solution — standardizedSolution_boot","text":"standard errors standard deviation bootstrap estimates, can different delta-method standard errors.","code":""},{"path":"https://Yangzhen1999.github.io/semboottools/reference/standardizedSolution_boot.html","id":"bootstrap-asymmetric-p-values","dir":"Reference","previous_headings":"","what":"Bootstrap Asymmetric p-Values","title":"Bootstrap CIs for Standardized Solution — standardizedSolution_boot","text":"percentile bootstrap confidence interval requested, asymmetric bootstrap p-values also computed, using method presented Asparouhov Muthén (2021).","code":""},{"path":"https://Yangzhen1999.github.io/semboottools/reference/standardizedSolution_boot.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Bootstrap CIs for Standardized Solution — standardizedSolution_boot","text":"Asparouhov, ., & Muthén, B. (2021). Bootstrap p-value computation. Retrieved https://www.statmodel.com/download/FAQ-Bootstrap%20-%20Pvalue.pdf","code":""},{"path":[]},{"path":"https://Yangzhen1999.github.io/semboottools/reference/standardizedSolution_boot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bootstrap CIs for Standardized Solution — standardizedSolution_boot","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448. Originally proposed issue GitHub https://github.com/simsem/semTools/issues/101#issue-1021974657, inspired discussion Google group lavaan https://groups.google.com/g/lavaan/c/qQBXSz5cd0o/m/R8YT5HxNAgAJ. boot::boot.ci() used form percentile confidence intervals version.","code":""},{"path":"https://Yangzhen1999.github.io/semboottools/reference/standardizedSolution_boot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootstrap CIs for Standardized Solution — standardizedSolution_boot","text":"","code":"library(lavaan) set.seed(5478374) n <- 50 x <- runif(n) - .5 m <- .40 * x + rnorm(n, 0, sqrt(1 - .40)) y <- .30 * m + rnorm(n, 0, sqrt(1 - .30)) dat <- data.frame(x = x, y = y, m = m) model <- ' m ~ a*x y ~ b*m ab := a*b '  # Should set bootstrap to at least 2000 in real studies fit <- sem(model, data = dat, fixed.x = FALSE,            se = \"boot\",            bootstrap = 100) summary(fit) #> lavaan 0.6-19 ended normally after 1 iteration #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                         5 #>  #>   Number of observations                            50 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 0.020 #>   Degrees of freedom                                 1 #>   P-value (Chi-square)                           0.887 #>  #> Parameter Estimates: #>  #>   Standard errors                            Bootstrap #>   Number of requested bootstrap draws              100 #>   Number of successful bootstrap draws             100 #>  #> Regressions: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   m ~                                                  #>     x          (a)    0.569    0.325    1.749    0.080 #>   y ~                                                  #>     m          (b)    0.219    0.146    1.495    0.135 #>  #> Variances: #>                    Estimate  Std.Err  z-value  P(>|z|) #>    .m                 0.460    0.086    5.381    0.000 #>    .y                 0.570    0.110    5.178    0.000 #>     x                 0.078    0.012    6.782    0.000 #>  #> Defined Parameters: #>                    Estimate  Std.Err  z-value  P(>|z|) #>     ab                0.125    0.126    0.992    0.321 #>   std <- standardizedSolution_boot(fit) #> Warning: The number of bootstrap samples (100) is less than 'boot_pvalue_min_size' (1000). Bootstrap p-values are not computed. std #>  #> Bootstrapping: #>                                      #>  Valid Bootstrap Samples: 100        #>  Level of Confidence:     95.0%      #>  CI Type:                 Percentile #>  Standardization Type:    std.all    #>  #> Parameter Estimates Settings: #>                                                  #>  Standard errors:                      Bootstrap #>  Number of requested bootstrap draws:  100       #>  Number of successful bootstrap draws: 100       #>  #> Regressions: #>            Std    SE     p  CI.Lo CI.Up   bSE bCI.Lo bCI.Up #>  m ~                                                        #>   x (a)  0.229 0.127 0.072 -0.020 0.477 0.125 -0.041  0.454 #>  y ~                                                        #>   m (b)  0.198 0.118 0.092 -0.032 0.429 0.115 -0.024  0.464 #>  #> Variances: #>            Std    SE     p  CI.Lo CI.Up   bSE bCI.Lo bCI.Up #>   .m     0.948 0.058 0.000  0.834 1.062 0.057  0.793  1.000 #>   .y     0.961 0.047 0.000  0.869 1.052 0.052  0.785  1.000 #>    x     1.000                                              #>  #> Defined Parameters: #>            Std    SE     p  CI.Lo CI.Up   bSE bCI.Lo bCI.Up #>  ab (ab) 0.045 0.040 0.259 -0.033 0.124 0.043 -0.007  0.164 #>  #> Footnote: #> - Std: Standardized estimates. #> - SE: Delta method standard errors. #> - p: Delta method p-values. #> - CI.Lo, CI.Up: Delta method confidence intervals. #> - bSE: Bootstrap standard errors. #> - bCI.Lo, bCI.Up: Bootstrap confidence intervals.  # Print in a friendly format with only standardized solution print(std, output = \"text\") #>  #> Standardized Estimates Only #>  #>   Standard errors                            Bootstrap #>   Standard errors (boot.se)                  Bootstrap #>   Confidence interval (boot.ci.)             Bootstrap #>   Confidence Level (boot.ci.)                    95.0% #>   Bootstrap CI Type (boot.ci.)              Percentile #>   Standardization Type                         std.all #>   Number of requested bootstrap draws              100 #>   Number of successful bootstrap draws             100 #>  #> Regressions: #>                Standardized  Std.Err  z-value  P(>|z|) ci.lower ci.upper #>   m ~                                                                    #>     x          (a)    0.229    0.127    1.800    0.072   -0.020    0.477 #>   y ~                                                                    #>     m          (b)    0.198    0.118    1.684    0.092   -0.032    0.429 #>   boot.se boot.ci.lower boot.ci.upper #>                                       #>     0.125   -0.041         0.454      #>                                       #>     0.115   -0.024         0.464      #>  #> Variances: #>                Standardized  Std.Err  z-value  P(>|z|) ci.lower ci.upper #>    .m                 0.948    0.058   16.325    0.000    0.834    1.062 #>    .y                 0.961    0.047   20.595    0.000    0.869    1.052 #>     x                 1.000                               1.000    1.000 #>   boot.se boot.ci.lower boot.ci.upper #>     0.057    0.793         1.000      #>     0.052    0.785         1.000      #>        NA       NA            NA      #>  #> Defined Parameters: #>                Standardized  Std.Err  z-value  P(>|z|) ci.lower ci.upper #>     ab                0.045    0.040    1.130    0.259   -0.033    0.124 #>   boot.se boot.ci.lower boot.ci.upper #>     0.043   -0.007         0.164      #>   # Print in a friendly format with both unstandardized # and standardized solution print(std, output = \"text\", standardized_only = FALSE) #>  #> Parameter Estimates: #>  #>   Standard errors                            Bootstrap #>   Number of requested bootstrap draws              100 #>   Number of successful bootstrap draws             100 #>  #> Regressions: #>                    Estimate  Std.Err  z-value  P(>|z|) ci.lower ci.upper #>   m ~                                                                    #>     x          (a)    0.569    0.325    1.749    0.080   -0.098    1.261 #>   y ~                                                                    #>     m          (b)    0.219    0.146    1.495    0.135   -0.020    0.613 #>  Standardized Std.Err.std ci.std.lower ci.std.upper #>                                                     #>     0.229        0.125      -0.041        0.454     #>                                                     #>     0.198        0.115      -0.024        0.464     #>  #> Variances: #>                    Estimate  Std.Err  z-value  P(>|z|) ci.lower ci.upper #>    .m                 0.460    0.086    5.381    0.000    0.279    0.623 #>    .y                 0.570    0.110    5.178    0.000    0.345    0.775 #>     x                 0.078    0.012    6.782    0.000    0.055    0.101 #>  Standardized Std.Err.std ci.std.lower ci.std.upper #>     0.948        0.057       0.793        1.000     #>     0.961        0.052       0.785        1.000     #>     1.000           NA          NA           NA     #>  #> Defined Parameters: #>                    Estimate  Std.Err  z-value  P(>|z|) ci.lower ci.upper #>     ab                0.125    0.126    0.992    0.321   -0.019    0.501 #>  Standardized Std.Err.std ci.std.lower ci.std.upper #>     0.045        0.043      -0.007        0.164     #>   # hist_qq_boot() can be used to examine the bootstrap estimates # of a parameter hist_qq_boot(std, param = \"ab\")   # scatter_boot() can be used to examine the bootstrap estimates # of two or more parameters scatter_boot(std, params = c(\"ab\", \"a\", \"b\"))"},{"path":"https://Yangzhen1999.github.io/semboottools/reference/store_boot.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute and Store Bootstrap Estimates — store_boot","title":"Compute and Store Bootstrap Estimates — store_boot","text":"function computes bootstrap estimates fitted structural equation model stores estimates processing.","code":""},{"path":"https://Yangzhen1999.github.io/semboottools/reference/store_boot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute and Store Bootstrap Estimates — store_boot","text":"","code":"store_boot(   object,   type = \"std.all\",   do_bootstrapping = TRUE,   R = 1000,   boot_type = \"ordinary\",   parallel = c(\"no\", \"multicore\", \"snow\"),   ncpus = parallel::detectCores(logical = FALSE) - 1,   iseed = NULL,   keep.idx = FALSE,   bootstrapLavaan_args = list() )"},{"path":"https://Yangzhen1999.github.io/semboottools/reference/store_boot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute and Store Bootstrap Estimates — store_boot","text":"object 'lavaan'-class object, fitted 'se = \"boot\"'. type type standard estimates. argument lavaan::standardizedSolution(), support values supported lavaan::standardizedSolution(). Default \"std.\". do_bootstrapping TRUE bootstrapping requested fitting model, bootstrapping done using lavaan::bootstrapLavaan(). Default TRUE. R lavaan::bootstrapLavaan() called (see do_bootstrapping), number bootstrap samples, used lavaan::bootstrapLavaan(). boot_type lavaan::bootstrapLavaan() called (see do_bootstrapping), type bootstrapping, passed argument type lavaan::bootstrapLavaan(). Default \"ordinary\". See help page lavaan::bootstrapLavaan() details. parallel lavaan::bootstrapLavaan() called (see do_bootstrapping), whether parallel processing used. passed argument name lavaan::bootstrapLavaan(). Default \"\". Can \"snow\" \"multicore\". See help page lavaan::bootstrapLavaan() details. ncpus lavaan::bootstrapLavaan() called (see do_bootstrapping), parallel processing used, number CPU cores use, passed argument name lavaan::bootstrapLavaan(). Default parallel::detectCores(logical = FALSE) - 1, number physical cores minus 1, different default lavaan::bootstrapLavaan() identical default lavaan::sem() lavaan::cfa(). iseed lavaan::bootstrapLavaan() called (see do_bootstrapping), integer used generate reproducible bootstrap results, passed argument name lavaan::bootstrapLavaan(). Default NULL nearly always set arbitrary integer. See help page lavaan::bootstrapLavaan() details. keep.idx Whether indices cases selected bootstrap sample stored. passed argument name lavaan::bootstrapLavaan(). Default FALSE. bootstrapLavaan_args named list additional arguments passed lavaan::bootstrapLavaan(). Note arguments store_boot() takes precedence, overriding arguments names list, .","code":""},{"path":"https://Yangzhen1999.github.io/semboottools/reference/store_boot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute and Store Bootstrap Estimates — store_boot","text":"original lavaan object returned following objects stored external slot: sbt_boot_std: matrix bootstrap estimates standardized solution. sbt_boot_def: matrix bootstrap estimates user-defined parameters, . sbt_boot_ustd: matrix bootstrap estimates free parameters, bootstrapping requested fitting model (.e., se set \"boot\" \"bootstrap\" fitting model lavaan).","code":""},{"path":"https://Yangzhen1999.github.io/semboottools/reference/store_boot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute and Store Bootstrap Estimates — store_boot","text":"function store_boot() receives lavaan::lavaan object, optionally fitted bootstrapping standard errors requested, compute store bootstrap estimates user-defined parameters estimates standardized solution. bootstrapping requested fitting model (.e., se set \"boot\" \"bootstrap\"), bootstrapping conducted using lavaan::bootstrapLavaan() compute bootstrap estimates free parameters. Otherwise, stored bootstrap estimates used subsequent steps. standardized solution bootstrap estimates, works calling lavaan::standardizedSolution() bootstrap estimates free parameters bootstrap sample compute standardized estimates sample. user-defined parameters, works calling function used compute user-defined parameters bootstrap estimates free parameters bootstrap samples compute user-defined parameters. bootstrap estimates stored external slot fit object processing.","code":""},{"path":"https://Yangzhen1999.github.io/semboottools/reference/store_boot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute and Store Bootstrap Estimates — store_boot","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448. Based semhelpinghands::standardizedSolution_boot_ci(), originally proposed issue GitHub https://github.com/simsem/semTools/issues/101#issue-1021974657, inspired discussion Google group lavaan https://groups.google.com/g/lavaan/c/qQBXSz5cd0o/m/R8YT5HxNAgAJ. Unlike semhelpinghands::standardizedSolution_boot_ci(), function computes stores bootstrap estimates.","code":""},{"path":"https://Yangzhen1999.github.io/semboottools/reference/store_boot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute and Store Bootstrap Estimates — store_boot","text":"","code":"library(lavaan) set.seed(5478374) n <- 50 x <- runif(n) - .5 m <- .40 * x + rnorm(n, 0, sqrt(1 - .40)) y <- .30 * m + rnorm(n, 0, sqrt(1 - .30)) dat <- data.frame(x = x, y = y, m = m) model <- ' m ~ a*x y ~ b*m ab := a*b '  # Should set bootstrap to at least 2000 in real studies fit <- sem(model, data = dat, fixed.x = FALSE,            se = \"boot\",            bootstrap = 100) summary(fit) #> lavaan 0.6-19 ended normally after 1 iteration #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                         5 #>  #>   Number of observations                            50 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 0.020 #>   Degrees of freedom                                 1 #>   P-value (Chi-square)                           0.887 #>  #> Parameter Estimates: #>  #>   Standard errors                            Bootstrap #>   Number of requested bootstrap draws              100 #>   Number of successful bootstrap draws             100 #>  #> Regressions: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   m ~                                                  #>     x          (a)    0.569    0.325    1.749    0.080 #>   y ~                                                  #>     m          (b)    0.219    0.146    1.495    0.135 #>  #> Variances: #>                    Estimate  Std.Err  z-value  P(>|z|) #>    .m                 0.460    0.086    5.381    0.000 #>    .y                 0.570    0.110    5.178    0.000 #>     x                 0.078    0.012    6.782    0.000 #>  #> Defined Parameters: #>                    Estimate  Std.Err  z-value  P(>|z|) #>     ab                0.125    0.126    0.992    0.321 #>   fit <- store_boot(fit)"},{"path":"https://Yangzhen1999.github.io/semboottools/news/index.html","id":"semboottools-0009011","dir":"Changelog","previous_headings":"","what":"semboottools 0.0.0.9011","title":"semboottools 0.0.0.9011","text":"Major functions finalized. Ready use. (0.0.0.9001) Renamed plot_boot() hist_qq_boot() avoid name conflict functions similar names. (0.0.0.9002) Initial setup pkgdown website. (0.0.0.9003) Added asymmetric bootstrap p-values standardizedSolution_boot(). Enabled default. (0.0.0.9004) Changed default output format print.sbt_std_boot() \"text\". (0.0.0.9004) Updated maintainer email address. (0.0.0.9005) Added parameterEstimates_boot(), print method. Used lavaan.printer default. Also updated pkgdown site. (0.0.0.9006) Updated store_boot() store information. (0.0.0.9007) Updated related functions store_boot() longer implicitly called bootstrapping. (0.0.0.9007) Enabled tests increase test coverage. (0.0.0.9008) Updated print method output standardizedSolution_boot() use lavaan.printer default. (0.0.0.9009) Updated parameterEstimates_boot() bug multigroup models. (0.0.0.9009) Updated hist_qq_boot() scatter_boot() support output parameterEstimates_boot(). (0.0.0.9010) Fixed problem within unicode character. (0.0.0.9011) Adde GitHub action folder .Rbuildignore. (0.0.0.9011)","code":""}]
